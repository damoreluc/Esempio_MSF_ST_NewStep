<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="FB_MSF" Id="{5e50c71d-3b45-42b0-ab70-5f9410a30be3}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_MSF
VAR_INPUT
	(* main inputs to the state machine *)
	bEnable		: BOOL;		// state machine enable
	bStart		: BOOL;		// start signal (N.O. contact)
	bStop		: BOOL;		// stop signal (N.C. contact)
	bEmg		: BOOL;		// emergency signal (N.C. contact)
	bAck		: BOOL;		// error acknowledge signal (N.O. contact)
	bFc1		: BOOL;		// proximity sensor on conveyor input (N.O. contact)
	bFc2		: BOOL;		// proximity sensor on conveyor output (N.O. contact)
END_VAR

VAR_OUTPUT
	(* control signals to the plant *)
	bH1			:	BOOL;	// machine running light indicator
	bHemg		:	BOOL;	// emergency light indicator
	bConveyor	:	BOOL;	// conveyor motor contactor
	bIsEmpty	:	BOOL;	// TRUE when conveyor is empty
	
END_VAR

VAR_IN_OUT
	(* state machine internals, useful for debugging  *)
	stStatus : ST_FSM_Status;
END_VAR

VAR
	(* state machine internals *)
	bInitialized : BOOL;		// FB initialization
	eNewstep : E_Step;			// Request for a new step
	bEntryact : BOOL;			// Step Entry Action Performed
	fbTonStep : TON;			// Permanence in step timer
	
	(* filters on other input from plant *)
	fbTonPacketIn : TON();		// Filter on the input object presence signal
	fbRtPacketIn : R_TRIG();	// Presence of Incoming Object (rise edge)
	fbTonPacketOut : TON();		// Filter on the object discharge signal
	fbRtPacketOut: R_TRIG();	// Object Discharge (rise edge)
	
	(* filters on stop input *)
	fbFtStop : F_TRIG;			// Stop control (fall edge)
	bStopRequest : BOOL;		// Stop request
	
	// Enabling Automation
	enable	: BOOL;

    // Blinker
	osc : FB_Lampeggio();
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[IF NOT bInitialized THEN
	(* here you can wait events from other controllers *)
	eNewStep := E_Step.NoStep;
	stStatus.eStep := E_Step.Stop;
	bEntryact := FALSE;
	bInitialized := TRUE;
ELSE
	// --- FSM Cyclical Code ----------------------------------------------
	
	// update of the enabling conditions (bStop, alarms, etc.)
    enable := bEnable AND bStop AND bEmg;
	
	// 1. FSM Preamble ----------------------------------------------------

    // 1.a State machine disabled or failure
	IF NOT bEnable OR NOT bEmg THEN
		eNewStep := E_Step.NeOrError;
		IF stStatus.eStep <> E_Step.NeOrError THEN
			stStatus.eErrorStep := stStatus.eStep;
		END_IF
	END_IF

	// 1.b Update eStep with the required step to perform
	//     and set bEntryact to FALSE in order to enable the Entry action
	IF eNewstep <> E_Step.NoStep THEN
		stStatus.eStep := eNewstep;
		eNewstep := E_Step.NoStep;
		bEntryact := FALSE;
	END_IF;

	// 1.c Do filters on signals	
	fbTonPacketIn(IN := bFc1, PT := T#200MS);	// Object Presence Sensor Filter on Loading Platform
	fbTonPacketOut(IN := bFc2, PT := T#200MS);	// Object Presence Sensor Filter on Unloading Platform	
	
	//     Do edge detection
	fbRtPacketIn(CLK := fbTonPacketIn.Q);		// Edge detection on Loading Platform
	fbRtPacketOut(CLK := fbTonPacketOut.Q);		// Edge detection on Unloading Platform	
	
	fbFtStop(CLK := bStop);						// Active edge of the Stop control
	
	// Do requests, for example to stop the machine
	IF fbFtStop.Q AND bEnable AND bEmg THEN
		bStopRequest := TRUE;
	END_IF
	
	
	// 2. The main switch-case ---------------------------------------------------
	CASE stStatus.eStep OF
		// not Enabled or Error -----------------------
		E_Step.NeOrError :
			// on entry action
			IF NOT bEntryact THEN
				stStatus.bFailure := TRUE;
				bEntryact := TRUE;
			END_IF
			
			// body
			bH1 := TRUE;
			bHEmg := TRUE;
			bConveyor := FALSE;
			bIsEmpty := FALSE;
			
			// next state transition
			IF bEnable AND bAck THEN
				eNewStep := E_Step.Recovering;
			END_IF
			
			// on exit action
			IF eNewStep <> E_Step.NoStep THEN
				;
			END_IF
			
		// Recovering ---------------------------------			
		E_Step.Recovering :
			// on entry action
			IF NOT bEntryact THEN
				bEntryact := TRUE;
			END_IF
			
			// body
			bH1 := TRUE;
			bHEmg := osc.q;
			bConveyor := FALSE;
			bIsEmpty := FALSE;
			
			// next state transition
			IF bEnable AND stStatus.tStepTime > T#10S THEN
				eNewStep := E_Step.Stopping;
			END_IF
			
			// on exit action
			IF eNewStep <> E_Step.NoStep THEN
				stStatus.bFailure := FALSE;
			END_IF			

		// Stopping -----------------------------------
		E_Step.Stopping :
			// on entry action
			IF NOT bEntryact THEN
				bEntryact := TRUE;
			END_IF
			
			// body
			bH1 := TRUE;
			bHEmg := FALSE;
			bConveyor := FALSE;
			bIsEmpty := TRUE;
			
			// next state transition
			IF stStatus.tStepTime >= T#2S THEN
				eNewStep := E_Step.Stop;
			END_IF
			
			// on exit action
			IF eNewStep <> E_Step.NoStep THEN
				;
			END_IF
			
		// Stop ---------------------------------------
		E_Step.Stop :
			// on entry action
			IF NOT bEntryact THEN
				bStopRequest := FALSE;
				bEntryact := TRUE;
			END_IF
			
			// body
			bH1 := FALSE;
			bHEmg := FALSE;
			bConveyor := FALSE;
			bIsEmpty := FALSE;
			
			// next state transition
			IF bStart THEN
				eNewStep := E_Step.Waiting;
			END_IF
			
			// on exit action
			IF eNewStep <> E_Step.NoStep THEN
				;
			END_IF

		// Waiting ------------------------------------
		E_Step.Waiting :
			// on entry action
			IF NOT bEntryact THEN
				bEntryact := TRUE;
			END_IF
			
			// body
			bH1 := TRUE;
			bHEmg := FALSE;
			bConveyor := FALSE;
			bIsEmpty := TRUE;
			
			// next state transition
			IF bStopRequest AND NOT bFc1 THEN
				eNewStep := E_Step.Stopping;
			ELSE
				IF fbRtPacketIn.Q AND NOT bFc2 THEN
					eNewStep := E_Step.Feeding;
				END_IF
			END_IF
			
			// on exit action
			IF eNewStep <> E_Step.NoStep THEN
				;
			END_IF

		// Feeding ------------------------------------
		E_Step.Feeding :
			// on entry action
			IF NOT bEntryact THEN
				bEntryact := TRUE;
			END_IF
			
			// body
			bH1 := TRUE;
			bHEmg := FALSE;
			bConveyor := TRUE;
			bIsEmpty := FALSE;
			
			// next state transition
			IF bStopRequest THEN
				eNewStep := E_Step.Stopping;
			ELSE
				IF fbRtPacketOut.Q THEN
					eNewStep := E_Step.Unloading;
				END_IF
			END_IF
			
			// on exit action
			IF eNewStep <> E_Step.NoStep THEN
				;
			END_IF
		
		// Unloading ----------------------------------
		E_Step.Unloading :
			// on entry action
			IF NOT bEntryact THEN
				bEntryact := TRUE;
			END_IF
			
			// body
			bH1 := TRUE;
			bHEmg := FALSE;
			bConveyor := TRUE;
			bIsEmpty := TRUE;
			
			// next state transition
			IF bStopRequest THEN
				eNewStep := E_Step.Stopping;
			ELSE
				IF fbRtPacketIn.Q AND stStatus.tStepTime < T#10S THEN
					eNewStep := E_Step.Feeding;
				ELSIF stStatus.tStepTime > T#10S THEN
					eNewStep := E_Step.Stopping;
				END_IF
			END_IF
			
			// on exit action
			IF eNewStep <> E_Step.NoStep THEN
				;
			END_IF
			
	ELSE
		// this happens also if we forget to code one step 
		eNewstep := E_Step.NeOrError;
		stStatus.eErrorStep := E_Step.Unknown;
		stStatus.nErrorID := -9;
	END_CASE;
	
	// 3. FSM Epilogue ------------------------------------------------------
	// 3.1 Calling Auxiliary FBs
	osc( enable := (stStatus.eStep = E_Step.Recovering), t_high := T#500MS, t_low := T#500MS );
	
	// 3.2 Elapsed time into the current step
	fbTonStep(IN := (eNewstep = E_Step.NoStep), PT := T#500H );
	stStatus.tStepTime := fbTonStep.ET;
	
END_IF
]]></ST>
    </Implementation>
  </POU>
</TcPlcObject>